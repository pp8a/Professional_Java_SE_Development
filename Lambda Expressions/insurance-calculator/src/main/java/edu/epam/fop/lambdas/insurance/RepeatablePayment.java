package edu.epam.fop.lambdas.insurance;

import java.math.BigInteger;
import java.time.Period;
/**
 *  (records) - это сокращенный синтаксис для создания классов, которые предназначены преимущественно для хранения данных.
 *  RepeatablePayment представляет повторяющийся платеж или оплату.
 */
public record RepeatablePayment(Period unit, Currency currency, BigInteger amount) {
	/*
	 * unit: Периодичность повторяющегося платежа, представленного объектом класса Period.
	 * currency: Валюта платежа, представленная объектом класса Currency.
	 * amount: Сумма платежа, представленная объектом класса BigInteger
	 */
	
	/*
	 * Каждое из этих полей передается в конструкторе и становится неизменяемым после создания экземпляра RepeatablePayment. 
	 * Таким образом, объект RepeatablePayment будет представлять одну конкретную повторяющуюся оплату с заданной периодичностью, 
	 * валютой и суммой.
	 * 
	 * Ключевое слово record автоматически создает следующее:
	 * 1. Конструктор: Конструктор, принимающий все поля класса в качестве параметров и инициализирующий их значения.
	 * 2. Методы доступа (accessor methods): Создаются методы, 
	 * которые позволяют получить значения полей (getUnit(), getCurrency(), getAmount()).
	 * 3. Метод toString(): Автоматически создается метод toString(), 
	 * который возвращает строковое представление объекта в формате "RecordName[field1=value1, field2=value2, ...]".
	 * 4. Методы equals() и hashCode(): Автоматически создаются методы для сравнения объектов по содержимому 
	 * и для вычисления хэш-кода.
	 * 
	 * Таким образом, использование record позволяет создать простой и компактный класс для хранения данных, 
	 * а также автоматически предоставляет методы для работы с этими данными.
	 */
}
